{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"history/","text":"History.vue Documentation The History.vue file is a Vue.js component responsible for rendering the user's nutrition history. This document provides an explanation of the template structure, script logic, and the overall purpose of the component. Script Logic Reactive Variables <script setup> import NutritionTracker from '../components/history/NutritionTracker.vue'; import { onAuthStateChanged, getAuth } from \"firebase/auth\"; import { ref, onMounted } from 'vue'; const uid = ref(null); onMounted(() => { const auth = getAuth(); onAuthStateChanged(auth, (user) => { if (user) { uid.value = user.uid; } else { // User is signed out uid.value = null; } }); }); console.log(uid) </script> Description: The script section uses the script setup syntax. It imports the NutritionTracker component and Firebase authentication functions. It defines a ref named uid to store the user ID. The onMounted lifecycle hook is used to asynchronously fetch the user's ID once the component is mounted. Inside the onAuthStateChanged callback, the user's ID is assigned to the uid variable if the user is authenticated; otherwise, it sets uid to null. Template Structure <template> <div> <NutritionTracker :uid=\"uid\" /> </div> </template> Description: The template includes a single div element that encapsulates the NutritionTracker component. It passes the uid (user ID) as a prop to the NutritionTracker component for fetching and displaying the user's nutrition history.","title":"History"},{"location":"history/#historyvue-documentation","text":"The History.vue file is a Vue.js component responsible for rendering the user's nutrition history. This document provides an explanation of the template structure, script logic, and the overall purpose of the component.","title":"History.vue Documentation"},{"location":"history/#script-logic","text":"","title":"Script Logic"},{"location":"history/#reactive-variables","text":"<script setup> import NutritionTracker from '../components/history/NutritionTracker.vue'; import { onAuthStateChanged, getAuth } from \"firebase/auth\"; import { ref, onMounted } from 'vue'; const uid = ref(null); onMounted(() => { const auth = getAuth(); onAuthStateChanged(auth, (user) => { if (user) { uid.value = user.uid; } else { // User is signed out uid.value = null; } }); }); console.log(uid) </script> Description: The script section uses the script setup syntax. It imports the NutritionTracker component and Firebase authentication functions. It defines a ref named uid to store the user ID. The onMounted lifecycle hook is used to asynchronously fetch the user's ID once the component is mounted. Inside the onAuthStateChanged callback, the user's ID is assigned to the uid variable if the user is authenticated; otherwise, it sets uid to null.","title":"Reactive Variables"},{"location":"history/#template-structure","text":"<template> <div> <NutritionTracker :uid=\"uid\" /> </div> </template> Description: The template includes a single div element that encapsulates the NutritionTracker component. It passes the uid (user ID) as a prop to the NutritionTracker component for fetching and displaying the user's nutrition history.","title":"Template Structure"},{"location":"home/","text":"Home.vue Documentation The Home.vue file plays a pivotal role in the Vue.js application for calculating Total Daily Energy Expenditure (TDEE). This document delves into the script logic, template structure, and styles, providing an in-depth understanding for developers. Script Logic Reactive Variables const age = ref(\"\"); const height = ref(\"\"); const weight = ref(\"\"); const gender = ref(\"men\"); const activityLevel = ref(\"0\"); const BMI = ref(\"\"); const BMR = ref(0); const idealWeight = ref(\"\"); Description: These variables, employing Vue's Composition API (ref), store user inputs and calculated values like BMI, BMR, and ideal weight. Their reactivity ensures dynamic updates within the application. Router and Composables const router = useRouter(); const { calculateBMI } = useBMI(); const { calculateBMR } = useBMR(); const { calculateWeight } = useWeightCalculator(); Description: The router variable accesses Vue Router, while composable functions from useBMI , useBMR , and useWeightCalculator perform crucial calculations for TDEE estimation. Calculation Function (calcTdee) function calcTdee() { BMI.value = calculateBMI(height.value, weight.value); BMR.value = calculateBMR(height.value, weight.value, age.value, gender.value, activityLevel.value); idealWeight.value = calculateWeight(height.value, gender.value); localStorage.setItem(\"idealWeight\", idealWeight.value); localStorage.setItem(\"BMI\", BMI.value); localStorage.setItem(\"BMR\", Math.round(BMR.value)); router.push({ name: 'result' }); } Description: The calcTdee function is invoked when the user clicks the \"Calculate\" button. It calculates BMI, BMR, and ideal weight, stores them in local storage, and navigates to the result page. Template Structure <template> <!-- TDEE Form --> <div class=\"container w-75 mt-5 pt-4 d-flex flex-column align-items-center border border-1 rounded-2 dark:bg-[#151515] \"> <h1 class=\"mb-5 align-items-center\">How Many Calories You Burn Every Day</h1> <form class=\"tdeeform\"> <!-- Age input --> <div class=\"d-flex flex-row mb-3\"> <label class=\"w-25\">Age</label> <input v-model.number=\"age\" class=\"form-control w-75\" placeholder=\"year\"> </div> <!-- Weight input --> <div class=\"d-flex flex-row mb-3\"> <label class=\"w-25\">Weight</label> <input v-model.number=\"weight\" class=\"form-control w-75\" placeholder=\"kg\"> </div> <!-- Height input --> <div class=\"d-flex flex-row mb-3\"> <label class=\"w-25\">Height</label> <input v-model.number=\"height\" class=\"form-control w-75\" placeholder=\"cm\"> </div> <ActivityInput /> <GenderInput /> <!-- Submit button --> <button class=\"btn btn-lg mb-4\" :class=\"{ 'btn-outline-light': isDark, 'btn-outline-dark': !isDark }\" cl type=\"button\" id=\"calculator\" @click=\"calcTdee()\"> Calculate </button> </form> </div> Description: The template is structured to accommodate the TDEE form and information sections, promoting clarity and separation of concerns.","title":"Home"},{"location":"home/#homevue-documentation","text":"The Home.vue file plays a pivotal role in the Vue.js application for calculating Total Daily Energy Expenditure (TDEE). This document delves into the script logic, template structure, and styles, providing an in-depth understanding for developers.","title":"Home.vue Documentation"},{"location":"home/#script-logic","text":"","title":"Script Logic"},{"location":"home/#reactive-variables","text":"const age = ref(\"\"); const height = ref(\"\"); const weight = ref(\"\"); const gender = ref(\"men\"); const activityLevel = ref(\"0\"); const BMI = ref(\"\"); const BMR = ref(0); const idealWeight = ref(\"\"); Description: These variables, employing Vue's Composition API (ref), store user inputs and calculated values like BMI, BMR, and ideal weight. Their reactivity ensures dynamic updates within the application.","title":"Reactive Variables"},{"location":"home/#router-and-composables","text":"const router = useRouter(); const { calculateBMI } = useBMI(); const { calculateBMR } = useBMR(); const { calculateWeight } = useWeightCalculator(); Description: The router variable accesses Vue Router, while composable functions from useBMI , useBMR , and useWeightCalculator perform crucial calculations for TDEE estimation.","title":"Router and Composables"},{"location":"home/#calculation-function-calctdee","text":"function calcTdee() { BMI.value = calculateBMI(height.value, weight.value); BMR.value = calculateBMR(height.value, weight.value, age.value, gender.value, activityLevel.value); idealWeight.value = calculateWeight(height.value, gender.value); localStorage.setItem(\"idealWeight\", idealWeight.value); localStorage.setItem(\"BMI\", BMI.value); localStorage.setItem(\"BMR\", Math.round(BMR.value)); router.push({ name: 'result' }); } Description: The calcTdee function is invoked when the user clicks the \"Calculate\" button. It calculates BMI, BMR, and ideal weight, stores them in local storage, and navigates to the result page.","title":"Calculation Function (calcTdee)"},{"location":"home/#template-structure","text":"<template> <!-- TDEE Form --> <div class=\"container w-75 mt-5 pt-4 d-flex flex-column align-items-center border border-1 rounded-2 dark:bg-[#151515] \"> <h1 class=\"mb-5 align-items-center\">How Many Calories You Burn Every Day</h1> <form class=\"tdeeform\"> <!-- Age input --> <div class=\"d-flex flex-row mb-3\"> <label class=\"w-25\">Age</label> <input v-model.number=\"age\" class=\"form-control w-75\" placeholder=\"year\"> </div> <!-- Weight input --> <div class=\"d-flex flex-row mb-3\"> <label class=\"w-25\">Weight</label> <input v-model.number=\"weight\" class=\"form-control w-75\" placeholder=\"kg\"> </div> <!-- Height input --> <div class=\"d-flex flex-row mb-3\"> <label class=\"w-25\">Height</label> <input v-model.number=\"height\" class=\"form-control w-75\" placeholder=\"cm\"> </div> <ActivityInput /> <GenderInput /> <!-- Submit button --> <button class=\"btn btn-lg mb-4\" :class=\"{ 'btn-outline-light': isDark, 'btn-outline-dark': !isDark }\" cl type=\"button\" id=\"calculator\" @click=\"calcTdee()\"> Calculate </button> </form> </div> Description: The template is structured to accommodate the TDEE form and information sections, promoting clarity and separation of concerns.","title":"Template Structure"},{"location":"login/","text":"Login.vue Documentation The Login.vue file is a Vue.js component responsible for rendering the user login form. This document provides an explanation of the template structure, script logic, and styles within the component. Script Logic Reactive Variables <script setup> import { ref } from 'vue'; import { getAuth, signInWithEmailAndPassword } from \"firebase/auth\"; import { useRouter } from 'vue-router'; const email = ref(\"\"); const password = ref(\"\"); const router = useRouter(); const login = () => { const auth = getAuth(); signInWithEmailAndPassword(auth, email.value, password.value) .then((data) => { console.log(\"Successfully logged in!\"); console.log(data) router.push(\"/\"); }) .catch((error) => { console.log(error.code); alert(error.message); }); } </script> Description: The script section uses the script setup syntax. It imports the necessary functions from Firebase, including authentication functions and the router from Vue.js. The login method uses Firebase authentication to sign in the user with the provided email and password. Template Structure <template> <div class=\"login-container\"> <h2>Login</h2> <div class=\"form-group\"> <label for=\"email\">Email:</label> <input v-model=\"email\" type=\"text\" required /> </div> <div class=\"form-group\"> <label for=\"password\">Password:</label> <input v-model=\"password\" type=\"password\" required /> </div> <button @click=\"login\">Login</button> </div> </template> Description: The template includes a login form with email and password input fields. The user can input their credentials, and the Login button triggers the login method.","title":"Login"},{"location":"login/#loginvue-documentation","text":"The Login.vue file is a Vue.js component responsible for rendering the user login form. This document provides an explanation of the template structure, script logic, and styles within the component.","title":"Login.vue Documentation"},{"location":"login/#script-logic","text":"","title":"Script Logic"},{"location":"login/#reactive-variables","text":"<script setup> import { ref } from 'vue'; import { getAuth, signInWithEmailAndPassword } from \"firebase/auth\"; import { useRouter } from 'vue-router'; const email = ref(\"\"); const password = ref(\"\"); const router = useRouter(); const login = () => { const auth = getAuth(); signInWithEmailAndPassword(auth, email.value, password.value) .then((data) => { console.log(\"Successfully logged in!\"); console.log(data) router.push(\"/\"); }) .catch((error) => { console.log(error.code); alert(error.message); }); } </script> Description: The script section uses the script setup syntax. It imports the necessary functions from Firebase, including authentication functions and the router from Vue.js. The login method uses Firebase authentication to sign in the user with the provided email and password.","title":"Reactive Variables"},{"location":"login/#template-structure","text":"<template> <div class=\"login-container\"> <h2>Login</h2> <div class=\"form-group\"> <label for=\"email\">Email:</label> <input v-model=\"email\" type=\"text\" required /> </div> <div class=\"form-group\"> <label for=\"password\">Password:</label> <input v-model=\"password\" type=\"password\" required /> </div> <button @click=\"login\">Login</button> </div> </template> Description: The template includes a login form with email and password input fields. The user can input their credentials, and the Login button triggers the login method.","title":"Template Structure"},{"location":"nutrition/","text":"Nutrition.vue Documentation The Nutrition.vue file is a component within the Vue.js application responsible for presenting nutrition information for various foods. This document provides a breakdown of the template structure, script logic, and style considerations for developers. Script Logic Imports and Composables import { useNutritionInfo } from '@/composables/useNutritionInfo'; import FoodSearch from '.././components/nutrition/FoodSearch.vue'; import NutritionInfo from '.././components/nutrition/NutritionInfo.vue'; const { food, nutritionInfo, getNutritionInfo } = useNutritionInfo(); const getFoodName = async (foodName) => { await getNutritionInfo(foodName); }; //useNutritionInfo.js import { ref } from 'vue'; import axios from 'axios'; const apiKey = 'e5FpDu9gY6PdfuHUlvHyrHKvPfnKr0U4DkaFlYrX'; export function useNutritionInfo() { const food = ref(\"\"); const nutritionInfo = ref({}); async function getNutritionInfo(foodName) { const apiUrl = `https://api.nal.usda.gov/fdc/v1/foods/search?query=${foodName}&api_key=${apiKey}`; try { const response = await axios.get(apiUrl); const data = response.data; if (data.foods && data.foods.length > 0) { const food = data.foods[0]; const nutrients = food.foodNutrients; nutritionInfo.value = { calories: nutrients.find(n => n.nutrientName === \"Energy\")?.value || 0, protein: nutrients.find(n => n.nutrientName === \"Protein\")?.value || 0, fat: nutrients.find(n => n.nutrientName === \"Total lipid (fat)\")?.value || 0, carbs: nutrients.find(n => n.nutrientName === \"Carbohydrate, by difference\")?.value || 0, }; } else { console.log(\"No nutrition information found for\", foodName); } } catch (error) { console.error('Error sending API request: ', error); } } return { food, nutritionInfo, getNutritionInfo }; } Description: This section imports necessary components and composables, including useNutritionInfo for managing nutritional data. It also defines the getFoodName function to retrieve nutrition information based on the entered food name. Template Structure <template> <div class=\"container\"> <h1 class=\"nutrition-header\">Nutrition Infomation</h1> <span>This tool provides nutrition information for various foods based on data from the </span> <a href=\"https://api.nal.usda.gov\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-blue-500\">USDA FoodData Central API</a>. <span>All nutritional values are calculated per 100 grams of the respective food.</span> </div> <div class=\"flex flex-col\"> <FoodSearch :getFoodName=\"getFoodName\" /> <NutritionInfo :foodName=\"food\" :nutritionInfo=\"nutritionInfo\" /> </div> <!-- Understanding Nutrition --> <div class=\"container mt-5 p-4 bg-gray-100 dark:bg-[#1a1a1a]\"> <h2 class=\"text-2xl font-semibold mb-3\">Understanding Nutrition</h2> <p class=\"mb-4\"> <strong>Macronutrients (Macros):</strong> In the context of health and fitness, macronutrients are chemical compounds that provide bulk energy. They include carbohydrates, proteins, and fats. This calculator focuses on daily carbohydrate, protein, and fat needs. </p> <p class=\"mb-4\"> <strong>Micronutrients:</strong> Another essential part of human nutrition consisting of vitamins and dietary minerals such as Vitamin A, copper, iron, and iodine. Micronutrients are needed in smaller quantities compared to macronutrients. </p> <h3 class=\"text-xl font-semibold mb-2\">Protein</h3> <p class=\"mb-4\"> Proteins are organic compounds comprised of amino acids, essential to well-being. Sources include both animal (meat, dairy) and plant-based (beans, legumes, nuts). </p> <h3 class=\"text-xl font-semibold mb-2\">Carbohydrates (Carbs)</h3> <p class=\"mb-4\"> Carbohydrates are classified as sugar, starch, or fiber. They are essential for energy, with complex carbohydrates (from vegetables, fruits, whole grains) being beneficial. </p> <h3 class=\"text-xl font-semibold mb-2\">Fat</h3> <p class=\"mb-4\"> Fats, though typically viewed as unhealthy, have structural and metabolic functions. Healthy fats include monounsaturated, polyunsaturated, and omega-3 fatty acids. </p> <h2 class=\"text-2xl font-semibold mb-3\">Daily Calorie Needs</h2> <p class=\"mb-4\"> The number of calories a person needs daily is based on factors like height, weight, age, and activity level. The calculator estimates daily caloric needs using BMR/RDEE and activity factors. </p> <p class=\"mb-4\"> <strong>General recommendations:</strong> Limit saturated fat, avoid trans fats, and replace them with healthier fats. Daily caloric needs vary based on factors like gender and activity level. </p> <p class=\"mb-4\"> <strong>Average daily caloric needs:</strong> Men: 2000-3000, Women: 1600-2400. Actual needs depend on individual factors. </p> </div> </template> Description: The template is structured to accommodate the Introduction Section and Food Search and Nutrition Info Sections sections.","title":"Nutrition"},{"location":"nutrition/#nutritionvue-documentation","text":"The Nutrition.vue file is a component within the Vue.js application responsible for presenting nutrition information for various foods. This document provides a breakdown of the template structure, script logic, and style considerations for developers.","title":"Nutrition.vue Documentation"},{"location":"nutrition/#script-logic","text":"","title":"Script Logic"},{"location":"nutrition/#imports-and-composables","text":"import { useNutritionInfo } from '@/composables/useNutritionInfo'; import FoodSearch from '.././components/nutrition/FoodSearch.vue'; import NutritionInfo from '.././components/nutrition/NutritionInfo.vue'; const { food, nutritionInfo, getNutritionInfo } = useNutritionInfo(); const getFoodName = async (foodName) => { await getNutritionInfo(foodName); }; //useNutritionInfo.js import { ref } from 'vue'; import axios from 'axios'; const apiKey = 'e5FpDu9gY6PdfuHUlvHyrHKvPfnKr0U4DkaFlYrX'; export function useNutritionInfo() { const food = ref(\"\"); const nutritionInfo = ref({}); async function getNutritionInfo(foodName) { const apiUrl = `https://api.nal.usda.gov/fdc/v1/foods/search?query=${foodName}&api_key=${apiKey}`; try { const response = await axios.get(apiUrl); const data = response.data; if (data.foods && data.foods.length > 0) { const food = data.foods[0]; const nutrients = food.foodNutrients; nutritionInfo.value = { calories: nutrients.find(n => n.nutrientName === \"Energy\")?.value || 0, protein: nutrients.find(n => n.nutrientName === \"Protein\")?.value || 0, fat: nutrients.find(n => n.nutrientName === \"Total lipid (fat)\")?.value || 0, carbs: nutrients.find(n => n.nutrientName === \"Carbohydrate, by difference\")?.value || 0, }; } else { console.log(\"No nutrition information found for\", foodName); } } catch (error) { console.error('Error sending API request: ', error); } } return { food, nutritionInfo, getNutritionInfo }; } Description: This section imports necessary components and composables, including useNutritionInfo for managing nutritional data. It also defines the getFoodName function to retrieve nutrition information based on the entered food name.","title":"Imports and Composables"},{"location":"nutrition/#template-structure","text":"<template> <div class=\"container\"> <h1 class=\"nutrition-header\">Nutrition Infomation</h1> <span>This tool provides nutrition information for various foods based on data from the </span> <a href=\"https://api.nal.usda.gov\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-blue-500\">USDA FoodData Central API</a>. <span>All nutritional values are calculated per 100 grams of the respective food.</span> </div> <div class=\"flex flex-col\"> <FoodSearch :getFoodName=\"getFoodName\" /> <NutritionInfo :foodName=\"food\" :nutritionInfo=\"nutritionInfo\" /> </div> <!-- Understanding Nutrition --> <div class=\"container mt-5 p-4 bg-gray-100 dark:bg-[#1a1a1a]\"> <h2 class=\"text-2xl font-semibold mb-3\">Understanding Nutrition</h2> <p class=\"mb-4\"> <strong>Macronutrients (Macros):</strong> In the context of health and fitness, macronutrients are chemical compounds that provide bulk energy. They include carbohydrates, proteins, and fats. This calculator focuses on daily carbohydrate, protein, and fat needs. </p> <p class=\"mb-4\"> <strong>Micronutrients:</strong> Another essential part of human nutrition consisting of vitamins and dietary minerals such as Vitamin A, copper, iron, and iodine. Micronutrients are needed in smaller quantities compared to macronutrients. </p> <h3 class=\"text-xl font-semibold mb-2\">Protein</h3> <p class=\"mb-4\"> Proteins are organic compounds comprised of amino acids, essential to well-being. Sources include both animal (meat, dairy) and plant-based (beans, legumes, nuts). </p> <h3 class=\"text-xl font-semibold mb-2\">Carbohydrates (Carbs)</h3> <p class=\"mb-4\"> Carbohydrates are classified as sugar, starch, or fiber. They are essential for energy, with complex carbohydrates (from vegetables, fruits, whole grains) being beneficial. </p> <h3 class=\"text-xl font-semibold mb-2\">Fat</h3> <p class=\"mb-4\"> Fats, though typically viewed as unhealthy, have structural and metabolic functions. Healthy fats include monounsaturated, polyunsaturated, and omega-3 fatty acids. </p> <h2 class=\"text-2xl font-semibold mb-3\">Daily Calorie Needs</h2> <p class=\"mb-4\"> The number of calories a person needs daily is based on factors like height, weight, age, and activity level. The calculator estimates daily caloric needs using BMR/RDEE and activity factors. </p> <p class=\"mb-4\"> <strong>General recommendations:</strong> Limit saturated fat, avoid trans fats, and replace them with healthier fats. Daily caloric needs vary based on factors like gender and activity level. </p> <p class=\"mb-4\"> <strong>Average daily caloric needs:</strong> Men: 2000-3000, Women: 1600-2400. Actual needs depend on individual factors. </p> </div> </template> Description: The template is structured to accommodate the Introduction Section and Food Search and Nutrition Info Sections sections.","title":"Template Structure"},{"location":"profile/","text":"Profile.vue Documentation The Profile.vue file is a Vue.js component responsible for rendering the user profile information. This document provides an explanation of the template structure, script logic, and styles within the component. Script Logic Reactive Variables <script setup> import { ref, onMounted, watchEffect } from 'vue'; import { getAuth, onAuthStateChanged } from 'firebase/auth'; import { getFirestore, doc, updateDoc, getDoc } from 'firebase/firestore'; const auth = getAuth(); const db = getFirestore(); const userId = ref(null); const profile = ref({ name: '', age: '', height: '', weight: '', gender: '', }); const editMode = ref(false); let originalProfile = null; const toggleEditMode = () => { if (editMode.value) { // Cancel editing, restore original values profile.value = { ...originalProfile }; originalProfile = null; } else { // Enter editing mode, store the original values originalProfile = { ...profile.value }; } editMode.value = !editMode.value; }; const saveProfile = async () => { try { // Update user document in Firestore const usersCollection = doc(db, 'users', userId.value); await updateDoc(usersCollection, profile.value); console.log('Profile saved:', profile.value); originalProfile = { ...profile.value }; toggleEditMode(); // Exit edit mode after saving } catch (error) { console.error('Error saving user profile:', error); } }; const fetchUserProfile = async () => { try { const usersCollection = doc(db, 'users', userId.value); const docSnap = await getDoc(usersCollection); if (docSnap.exists()) { const userData = docSnap.data(); profile.value = { ...userData }; } } catch (error) { console.error('Error fetching user profile:', error); } }; // Listen for changes in authentication state onAuthStateChanged(auth, (user) => { if (user) { userId.value = user.uid; fetchUserProfile(); } }); // Watch for changes in user ID and fetch the profile watchEffect(() => { if (userId.value) { fetchUserProfile(); } }); </script> </script> Description: The script section uses the script setup syntax. It imports necessary functions from Firebase, including authentication functions and Firestore functions. The toggleEditMode method toggles between the editable and non-editable modes of the user profile. The saveProfile method updates the user document in Firestore with the edited profile information. The fetchUserProfile method retrieves the user's profile information from Firestore. Template Structure <template> <div class=\"profile-container\"> <!-- ... (Omitted for brevity) ... --> <div v-if=\"!editMode\" class=\"w-full md:w-3/5 p-8 bg-white lg:ml-4 shadow-md\"> <!-- ... (Omitted for brevity) ... --> </div> <div v-else class=\"w-full md:w-3/5 p-8 bg-white lg:ml-4 shadow-md\"> <!-- ... (Omitted for brevity) ... --> </div> </div> </template> Description: The template section includes a user profile display with editable fields. It provides the user's name , age , height , weight , and gender . The profile is initially displayed in a non-editable mode. When the user clicks the Edit button, the fields become editable, and the Save and Cancel buttons appear.","title":"Profile"},{"location":"profile/#profilevue-documentation","text":"The Profile.vue file is a Vue.js component responsible for rendering the user profile information. This document provides an explanation of the template structure, script logic, and styles within the component.","title":"Profile.vue Documentation"},{"location":"profile/#script-logic","text":"","title":"Script Logic"},{"location":"profile/#reactive-variables","text":"<script setup> import { ref, onMounted, watchEffect } from 'vue'; import { getAuth, onAuthStateChanged } from 'firebase/auth'; import { getFirestore, doc, updateDoc, getDoc } from 'firebase/firestore'; const auth = getAuth(); const db = getFirestore(); const userId = ref(null); const profile = ref({ name: '', age: '', height: '', weight: '', gender: '', }); const editMode = ref(false); let originalProfile = null; const toggleEditMode = () => { if (editMode.value) { // Cancel editing, restore original values profile.value = { ...originalProfile }; originalProfile = null; } else { // Enter editing mode, store the original values originalProfile = { ...profile.value }; } editMode.value = !editMode.value; }; const saveProfile = async () => { try { // Update user document in Firestore const usersCollection = doc(db, 'users', userId.value); await updateDoc(usersCollection, profile.value); console.log('Profile saved:', profile.value); originalProfile = { ...profile.value }; toggleEditMode(); // Exit edit mode after saving } catch (error) { console.error('Error saving user profile:', error); } }; const fetchUserProfile = async () => { try { const usersCollection = doc(db, 'users', userId.value); const docSnap = await getDoc(usersCollection); if (docSnap.exists()) { const userData = docSnap.data(); profile.value = { ...userData }; } } catch (error) { console.error('Error fetching user profile:', error); } }; // Listen for changes in authentication state onAuthStateChanged(auth, (user) => { if (user) { userId.value = user.uid; fetchUserProfile(); } }); // Watch for changes in user ID and fetch the profile watchEffect(() => { if (userId.value) { fetchUserProfile(); } }); </script> </script> Description: The script section uses the script setup syntax. It imports necessary functions from Firebase, including authentication functions and Firestore functions. The toggleEditMode method toggles between the editable and non-editable modes of the user profile. The saveProfile method updates the user document in Firestore with the edited profile information. The fetchUserProfile method retrieves the user's profile information from Firestore.","title":"Reactive Variables"},{"location":"profile/#template-structure","text":"<template> <div class=\"profile-container\"> <!-- ... (Omitted for brevity) ... --> <div v-if=\"!editMode\" class=\"w-full md:w-3/5 p-8 bg-white lg:ml-4 shadow-md\"> <!-- ... (Omitted for brevity) ... --> </div> <div v-else class=\"w-full md:w-3/5 p-8 bg-white lg:ml-4 shadow-md\"> <!-- ... (Omitted for brevity) ... --> </div> </div> </template> Description: The template section includes a user profile display with editable fields. It provides the user's name , age , height , weight , and gender . The profile is initially displayed in a non-editable mode. When the user clicks the Edit button, the fields become editable, and the Save and Cancel buttons appear.","title":"Template Structure"},{"location":"register/","text":"Register.vue Documentation The Register.vue file is a Vue.js component responsible for rendering the user registration form. This document provides an explanation of the template structure, script logic, and styles within the component. Script Logic Reactive Variables <script setup> import { ref } from 'vue'; import { getAuth, createUserWithEmailAndPassword } from \"firebase/auth\"; import { useRouter } from 'vue-router'; import { getFirestore, collection, setDoc, doc } from \"firebase/firestore\"; import db from '../main' const email = ref(\"\"); const password = ref(\"\"); const router = useRouter(); const register = async () => { try { const data = await createUserWithEmailAndPassword(getAuth(), email.value, password.value); console.log(\"Successfully registered!\"); console.log(data.user.uid); console.log(data.user.email); const usersCollection = collection(db, 'users'); const userDocRef = doc(usersCollection, data.user.uid); await setDoc(userDocRef, { uid: data.user.uid, email: data.user.email, }); router.push(\"/\"); } catch (error) { console.log(error.code); alert(error.message); } } </script> Description: The script section uses the script setup syntax. It imports the necessary functions from Firebase, including authentication functions, Firestore functions, and the router from Vue.js. The register method uses Firebase authentication to create a new user with the provided email and password. It also creates a corresponding user document in Firestore with the user's UID and email. Template Structure <template> <div class=\"register-container\"> <h2>Register</h2> <div class=\"form-group\"> <label for=\"email\">Email:</label> <input v-model=\"email\" type=\"text\" required /> </div> <div class=\"form-group\"> <label for=\"password\">Password:</label> <input v-model=\"password\" type=\"password\" required /> </div> <button @click=\"register\">Register</button> </div> </template> Description: The template includes a registration form with email and password input fields. The user can input their registration details, and the Register button triggers the register method.","title":"Register"},{"location":"register/#registervue-documentation","text":"The Register.vue file is a Vue.js component responsible for rendering the user registration form. This document provides an explanation of the template structure, script logic, and styles within the component.","title":"Register.vue Documentation"},{"location":"register/#script-logic","text":"","title":"Script Logic"},{"location":"register/#reactive-variables","text":"<script setup> import { ref } from 'vue'; import { getAuth, createUserWithEmailAndPassword } from \"firebase/auth\"; import { useRouter } from 'vue-router'; import { getFirestore, collection, setDoc, doc } from \"firebase/firestore\"; import db from '../main' const email = ref(\"\"); const password = ref(\"\"); const router = useRouter(); const register = async () => { try { const data = await createUserWithEmailAndPassword(getAuth(), email.value, password.value); console.log(\"Successfully registered!\"); console.log(data.user.uid); console.log(data.user.email); const usersCollection = collection(db, 'users'); const userDocRef = doc(usersCollection, data.user.uid); await setDoc(userDocRef, { uid: data.user.uid, email: data.user.email, }); router.push(\"/\"); } catch (error) { console.log(error.code); alert(error.message); } } </script> Description: The script section uses the script setup syntax. It imports the necessary functions from Firebase, including authentication functions, Firestore functions, and the router from Vue.js. The register method uses Firebase authentication to create a new user with the provided email and password. It also creates a corresponding user document in Firestore with the user's UID and email.","title":"Reactive Variables"},{"location":"register/#template-structure","text":"<template> <div class=\"register-container\"> <h2>Register</h2> <div class=\"form-group\"> <label for=\"email\">Email:</label> <input v-model=\"email\" type=\"text\" required /> </div> <div class=\"form-group\"> <label for=\"password\">Password:</label> <input v-model=\"password\" type=\"password\" required /> </div> <button @click=\"register\">Register</button> </div> </template> Description: The template includes a registration form with email and password input fields. The user can input their registration details, and the Register button triggers the register method.","title":"Template Structure"},{"location":"result/","text":"Result.vue Documentation The Result.vue file is a component within the Vue.js application responsible for displaying the user's statistics, including maintenance calories, BMI (Body Mass Index) score, ideal weight, and macronutrient information. This document provides an explanation of the template structure, script logic, and the overall purpose of the component. Script Logic Reactive Variables <script setup> import BMIScoreTable from '@/components/BMIScoreTable.vue'; import { ref, onMounted } from 'vue' const maintainCalo = ref(0); const BMI = ref(0); const classBMI = ref(''); const idealWeight = ref(0); onMounted(() => { // Logic to retrieve and set values from localStorage // ... }) </script> Description: The script logic involves importing the BMIScoreTable component and using Vue's ref to define variables for maintenance calories, BMI, BMI classification, and ideal weight. The onMounted lifecycle hook is used to populate these variables from the values stored in the browser's localStorage Template Structure <template> <!-- body --> <div class=\"container mt-5 \"> <div class=\"row\"> <!-- stat --> <!-- calories per day --> <div class=\"col border border-black d-flex flex-column align-items-left\"> <div> <h1> Your stats </h1> </div> <div class=\"d-flex align-items-baseline\"> <h5>Your Maintenance Calories:</h5> <div class=\"ms-2\"> <h5 id=\"BMR\"> {{ maintainCalo }} calories per day</h5> </div> </div> //... <h5 class=\"me-2\"> Your BMI score: {{ BMI }} </h5> <span> Which means you are classified as <b>{{ classBMI }}</b></span> <!-- Macronutrients --> <div> <h1> Macronutrients </h1> <div class=\"\"> <div class=\"d-flex \"> <h5 class=\"\"> Maintenance </h5> <p class=\"macro\">&nbsp;{{ maintainCalo }} calories per day</p> </div> //... </div> </div> </div> <!-- BMI table --> <div class=\"col border border-black\"> <BMIScoreTable /> </div> </div> </div> </template> Description: The template is structured to accommodate the Statistics Display Section and Maintenance Calories and Macronutrients Section sections.","title":"Result"},{"location":"result/#resultvue-documentation","text":"The Result.vue file is a component within the Vue.js application responsible for displaying the user's statistics, including maintenance calories, BMI (Body Mass Index) score, ideal weight, and macronutrient information. This document provides an explanation of the template structure, script logic, and the overall purpose of the component.","title":"Result.vue Documentation"},{"location":"result/#script-logic","text":"","title":"Script Logic"},{"location":"result/#reactive-variables","text":"<script setup> import BMIScoreTable from '@/components/BMIScoreTable.vue'; import { ref, onMounted } from 'vue' const maintainCalo = ref(0); const BMI = ref(0); const classBMI = ref(''); const idealWeight = ref(0); onMounted(() => { // Logic to retrieve and set values from localStorage // ... }) </script> Description: The script logic involves importing the BMIScoreTable component and using Vue's ref to define variables for maintenance calories, BMI, BMI classification, and ideal weight. The onMounted lifecycle hook is used to populate these variables from the values stored in the browser's localStorage","title":"Reactive Variables"},{"location":"result/#template-structure","text":"<template> <!-- body --> <div class=\"container mt-5 \"> <div class=\"row\"> <!-- stat --> <!-- calories per day --> <div class=\"col border border-black d-flex flex-column align-items-left\"> <div> <h1> Your stats </h1> </div> <div class=\"d-flex align-items-baseline\"> <h5>Your Maintenance Calories:</h5> <div class=\"ms-2\"> <h5 id=\"BMR\"> {{ maintainCalo }} calories per day</h5> </div> </div> //... <h5 class=\"me-2\"> Your BMI score: {{ BMI }} </h5> <span> Which means you are classified as <b>{{ classBMI }}</b></span> <!-- Macronutrients --> <div> <h1> Macronutrients </h1> <div class=\"\"> <div class=\"d-flex \"> <h5 class=\"\"> Maintenance </h5> <p class=\"macro\">&nbsp;{{ maintainCalo }} calories per day</p> </div> //... </div> </div> </div> <!-- BMI table --> <div class=\"col border border-black\"> <BMIScoreTable /> </div> </div> </div> </template> Description: The template is structured to accommodate the Statistics Display Section and Maintenance Calories and Macronutrients Section sections.","title":"Template Structure"}]}